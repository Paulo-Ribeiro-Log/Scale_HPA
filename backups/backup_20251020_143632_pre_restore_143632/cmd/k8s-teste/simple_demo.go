package main

import (
	"time"

	"k8s-hpa-manager/internal/models"
	"k8s-hpa-manager/internal/tui/components"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

// SimpleDemo √© um modelo simples para demonstrar o layout unificado
type SimpleDemo struct {
	container     *components.UnifiedContainer
	currentState  models.AppState
	stateIndex    int
	width, height int
}

// NewSimpleDemo cria uma nova demo simples
func NewSimpleDemo() *SimpleDemo {
	return &SimpleDemo{
		container:    components.NewUnifiedContainer(),
		currentState: models.StateClusterSelection,
		stateIndex:   0,
	}
}

// Init implementa tea.Model
func (sd *SimpleDemo) Init() tea.Cmd {
	return tea.Tick(time.Second*3, func(t time.Time) tea.Msg {
		return tickMsg(t)
	})
}

// Update implementa tea.Model
func (sd *SimpleDemo) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		sd.width = msg.Width
		sd.height = msg.Height
		return sd, nil

	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "q", "f4":
			return sd, tea.Quit

		case "tab", "right", "l":
			// Avan√ßa para pr√≥ximo estado
			sd.nextState()
			return sd, nil

		case "shift+tab", "left", "h":
			// Volta para estado anterior
			sd.prevState()
			return sd, nil

		case "r":
			// Reset para primeiro estado
			sd.stateIndex = 0
			sd.currentState = models.StateClusterSelection
			return sd, nil
		}

	case tickMsg:
		// Avan√ßa automaticamente para pr√≥ximo estado a cada 3 segundos
		sd.nextState()

		// Adiciona uma mensagem de status baseada no estado atual
		sd.addStatusForCurrentState()

		return sd, tea.Tick(time.Second*3, func(t time.Time) tea.Msg {
			return tickMsg(t)
		})
	}

	return sd, nil
}

// View implementa tea.Model
func (sd *SimpleDemo) View() string {
	// Configurar o container com o estado atual
	sd.container.SetTitle(sd.currentState)

	// Gerar conte√∫do de demonstra√ß√£o baseado no estado
	content := sd.generateDemoContent()
	sd.container.SetContent(content)

	// Renderizar o container
	containerView := sd.container.Render()

	// Adicionar instru√ß√µes de controle
	controls := sd.renderControls()

	return lipgloss.JoinVertical(lipgloss.Left, containerView, controls)
}

// nextState avan√ßa para o pr√≥ximo estado
func (sd *SimpleDemo) nextState() {
	states := []models.AppState{
		models.StateClusterSelection,
		models.StateSessionSelection,
		models.StateNamespaceSelection,
		models.StateHPASelection,
		models.StateHPAEditing,
		models.StateNodeSelection,
		models.StateNodeEditing,
		models.StateCronJobSelection,
	}

	sd.stateIndex = (sd.stateIndex + 1) % len(states)
	sd.currentState = states[sd.stateIndex]
}

// prevState volta para o estado anterior
func (sd *SimpleDemo) prevState() {
	states := []models.AppState{
		models.StateClusterSelection,
		models.StateSessionSelection,
		models.StateNamespaceSelection,
		models.StateHPASelection,
		models.StateHPAEditing,
		models.StateNodeSelection,
		models.StateNodeEditing,
		models.StateCronJobSelection,
	}

	sd.stateIndex--
	if sd.stateIndex < 0 {
		sd.stateIndex = len(states) - 1
	}
	sd.currentState = states[sd.stateIndex]
}

// generateDemoContent gera conte√∫do de demonstra√ß√£o para cada estado
func (sd *SimpleDemo) generateDemoContent() string {
	switch sd.currentState {
	case models.StateClusterSelection:
		return `üåê CLUSTERS KUBERNETES DISPON√çVEIS

‚ñ∫ ‚úÖ akspriv-dev-central     (Conectado)
  ‚è≥ akspriv-prod-east       (Verificando...)
  ‚ùå akspriv-test-west       (Erro de conex√£o)
  ‚úÖ akspriv-staging-north   (Conectado)

üìä INFORMA√á√ïES DO SISTEMA
‚îú‚îÄ Clusters descobertos: 4
‚îú‚îÄ Kubeconfig: ~/.kube/config
‚îú‚îÄ Contexto atual: akspriv-dev-central
‚îî‚îÄ Status: Pronto para sele√ß√£o

üéÆ CONTROLES DISPON√çVEIS
‚Ä¢ ‚Üë‚Üì Navegar entre clusters
‚Ä¢ ENTER Selecionar cluster
‚Ä¢ Ctrl+L Carregar sess√£o salva
‚Ä¢ F5 Recarregar lista de clusters`

	case models.StateSessionSelection:
		return `üíæ GERENCIAMENTO DE SESS√ïES

üìÇ SESS√ïES DISPON√çVEIS

‚ñ∫ üìÑ hpa-upscale-prod-29-12-24_14:30:15
   üìù Escalonamento HPAs ambiente produ√ß√£o
   üìÖ 29/12/2024 14:30 | üéØ 12 HPAs | üîß 5 Node Pools

  üìÑ emergency-downscale-28-12-24_22:45:10
   üìù Redu√ß√£o emergencial recursos cluster
   üìÖ 28/12/2024 22:45 | üéØ 8 HPAs | üîß 3 Node Pools

  üìÑ maintenance-window-27-12-24_02:00:00
   üìù Janela de manuten√ß√£o programada
   üìÖ 27/12/2024 02:00 | üéØ 20 HPAs | üîß 8 Node Pools

üéÆ OPERA√á√ïES DISPON√çVEIS
‚Ä¢ ‚Üë‚Üì Navegar entre sess√µes
‚Ä¢ ENTER Carregar sess√£o
‚Ä¢ Ctrl+N/F2 Renomear sess√£o
‚Ä¢ Ctrl+R Deletar sess√£o`

	case models.StateNamespaceSelection:
		return `üìã SELE√á√ÉO DE NAMESPACES
Cluster: akspriv-dev-central

üì¶ NAMESPACES DISPON√çVEIS

‚ñ∫ [‚úì] api-services              (15 HPAs)
  [‚úì] web-frontend             (8 HPAs)
  [ ] database                 (3 HPAs)
  [ ] monitoring               (2 HPAs)
  [‚úì] ingress-nginx           (1 HPA)
  [ ] default                  (0 HPAs)

‚úÖ NAMESPACES SELECIONADOS (3)
‚Ä¢ api-services    ‚Üí 15 HPAs detectados
‚Ä¢ web-frontend    ‚Üí 8 HPAs detectados
‚Ä¢ ingress-nginx   ‚Üí 1 HPA detectado

üìä RESUMO DA SELE√á√ÉO
‚îú‚îÄ Total de HPAs: 24
‚îú‚îÄ Namespaces ativos: 3/6
‚îî‚îÄ Pronto para continuar

üéÆ CONTROLES
‚Ä¢ ‚Üë‚Üì Navegar ‚Ä¢ SPACE Selecionar ‚Ä¢ ENTER Confirmar`

	case models.StateHPASelection:
		return `üéØ GERENCIAMENTO DE HPAs
Cluster: akspriv-dev-central | Namespaces: 3 selecionados

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ api-services (15 HPAs) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ñ∫ [‚úì] api-gateway           Min:2 Max:10 Curr:5  ‚óè3
  [‚úì] user-service         Min:1 Max:8  Curr:3  ‚ú®
  [ ] payment-api          Min:2 Max:12 Curr:4
  [‚úì] notification-svc     Min:1 Max:6  Curr:2  ‚óè1

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ web-frontend (8 HPAs) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  [‚úì] react-app            Min:3 Max:15 Curr:8  ‚ú®‚óè2
  [ ] nginx-proxy          Min:2 Max:8  Curr:4
  [‚úì] static-assets        Min:1 Max:5  Curr:2

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ingress-nginx (1 HPA) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  [‚úì] nginx-controller     Min:2 Max:6  Curr:3  ‚óè1

üìä STATUS ATUAL
‚îú‚îÄ HPAs selecionados: 6/24
‚îú‚îÄ Modificados: 2 ‚ú®
‚îú‚îÄ Aplicados: 4 com m√∫ltiplas execu√ß√µes ‚óè
‚îî‚îÄ Rollouts habilitados: Deploy, DaemonSet, StatefulSet

üéÆ OPERA√á√ïES
‚Ä¢ Ctrl+D Aplicar individual ‚Ä¢ Ctrl+U Aplicar batch ‚Ä¢ ENTER Editar`

	case models.StateHPAEditing:
		return `‚úèÔ∏è  EDITANDO HPA: api-gateway
Cluster: akspriv-dev-central | Namespace: api-services

üìä CONFIGURA√á√ïES PRINCIPAIS
‚îú‚îÄ Min Replicas:     2 ‚Üí 3      ‚ú®
‚îú‚îÄ Max Replicas:     10 ‚Üí 15    ‚ú®
‚îú‚îÄ Target CPU:       70% ‚Üí 65%  ‚ú®
‚îî‚îÄ Target Memory:    80% ‚Üí 75%  ‚ú®

üîÑ OP√á√ïES DE ROLLOUT
‚îú‚îÄ Deployment:       ‚úÖ Habilitado
‚îú‚îÄ DaemonSet:        ‚ùå Desabilitado
‚îî‚îÄ StatefulSet:      ‚úÖ Habilitado

üì¶ RECURSOS DO DEPLOYMENT
‚îú‚îÄ CPU Request:      100m ‚Üí 150m ‚ú®
‚îú‚îÄ CPU Limit:        500m ‚Üí 800m ‚ú®
‚îú‚îÄ Memory Request:   128Mi ‚Üí 256Mi ‚ú®
‚îî‚îÄ Memory Limit:     512Mi ‚Üí 1Gi ‚ú®

üéÆ CONTROLES DE EDI√á√ÉO
‚Ä¢ ‚Üë‚Üì Navegar campos ‚Ä¢ ENTER Editar valor
‚Ä¢ SPACE Toggle rollout ‚Ä¢ TAB Alternar painel
‚Ä¢ Ctrl+S Salvar altera√ß√µes ‚Ä¢ ESC Voltar`

	case models.StateNodeSelection:
		return `üîß GERENCIAMENTO DE NODE POOLS
Cluster: akspriv-dev-central | Resource Group: dev-aks-rg

üìä NODE POOLS DISPON√çVEIS

‚ñ∫ [‚úì] system-pool           Nodes:3   Min:1  Max:5    [autoscale] ‚óè2
  [‚úì] worker-pool           Nodes:8   Min:3  Max:20   [autoscale] ‚ú®
  [ ] gpu-pool              Nodes:0   Min:0  Max:10   [manual]
  [‚úì] spot-pool             Nodes:5   Min:2  Max:15   [autoscale] *1
  [ ] memory-pool           Nodes:2   Min:1  Max:8    [autoscale] *2

üìà EXECU√á√ÉO SEQUENCIAL CONFIGURADA
‚îú‚îÄ Primeiro: spot-pool (*1)     ‚Üí Executar manualmente
‚îî‚îÄ Segundo:  memory-pool (*2)   ‚Üí Auto-start ap√≥s conclus√£o

üí∞ ESTIMATIVA DE CUSTOS
‚îú‚îÄ Configura√ß√£o atual: ~$450/m√™s
‚îú‚îÄ Ap√≥s altera√ß√µes:    ~$380/m√™s
‚îî‚îÄ Economia projetada: ~$70/m√™s (15.5%)

üéÆ OPERA√á√ïES AZURE
‚Ä¢ Ctrl+D Aplicar individual ‚Ä¢ Ctrl+U Aplicar batch
‚Ä¢ F12 Marcar sequencial ‚Ä¢ ENTER Editar configura√ß√µes`

	case models.StateNodeEditing:
		return `‚úèÔ∏è  EDITANDO NODE POOL: worker-pool
Cluster: akspriv-dev-central | Subscription: dev-subscription

‚öôÔ∏è  CONFIGURA√á√ïES ATUAIS
‚îú‚îÄ Autoscaling:      ‚úÖ Habilitado
‚îú‚îÄ Node Count:       8 (atual)
‚îú‚îÄ Min Nodes:        3 ‚Üí 5      ‚ú®
‚îú‚îÄ Max Nodes:        20 ‚Üí 25    ‚ú®
‚îî‚îÄ VM Size:          Standard_D4s_v3

üîß CONFIGURA√á√ïES AZURE
‚îú‚îÄ Availability Set: Habilitado
‚îú‚îÄ Ultra SSD:        Desabilitado
‚îú‚îÄ OS Disk Type:     Premium SSD
‚îî‚îÄ Network Policy:   Azure CNI

üí° IMPACT ANALYSIS
‚îú‚îÄ Aumento min nodes: +2 nodes
‚îú‚îÄ Custo adicional:   ~$120/m√™s
‚îú‚îÄ Maior estabilidade: ‚úÖ
‚îî‚îÄ Failover melhor:   ‚úÖ

üéÆ CONTROLES
‚Ä¢ ‚Üë‚Üì Navegar ‚Ä¢ ENTER Editar ‚Ä¢ SPACE Toggle autoscaling
‚Ä¢ Ctrl+S Aplicar via Azure CLI ‚Ä¢ ESC Cancelar`

	case models.StateCronJobSelection:
		return `‚è∞ GERENCIAMENTO DE CRONJOBS
Cluster: akspriv-dev-central | Namespace: All

üìÖ CRONJOBS DISPON√çVEIS

‚ñ∫ [‚úì] backup-database          0 2 * * *    üü¢ Ativo
      Executa todo dia √†s 2:00 AM
      √öltima exec: 29/12 02:00 ‚úÖ

  [‚úì] cleanup-logs            0 4 * * 0     üü¢ Ativo
      Executa domingo √†s 4:00 AM
      √öltima exec: 24/12 04:00 ‚úÖ

  [ ] maintenance-check       */30 * * * *  üî¥ Suspenso
      Executa a cada 30 minutos
      √öltima exec: 20/12 14:30 ‚ö†Ô∏è

  [‚úì] report-generation       0 8 1 * *     üü¢ Ativo
      Executa 1¬∫ dia do m√™s √†s 8:00 AM
      √öltima exec: 01/12 08:00 ‚úÖ

üìä ESTAT√çSTICAS
‚îú‚îÄ Total CronJobs: 4
‚îú‚îÄ Ativos: 3 üü¢
‚îú‚îÄ Suspensos: 1 üî¥
‚îî‚îÄ Pr√≥xima exec: backup-database em 8h

üéÆ OPERA√á√ïES
‚Ä¢ ‚Üë‚Üì Navegar ‚Ä¢ SPACE Selecionar ‚Ä¢ ENTER Editar
‚Ä¢ Ctrl+D Aplicar individual ‚Ä¢ Ctrl+U Aplicar batch`

	default:
		return `üöÄ K8S HPA MANAGER - CONTAINER UNIFICADO

üìê DEMONSTRA√á√ÉO DO LAYOUT
‚Ä¢ Dimens√µes fixas: 230x70 caracteres
‚Ä¢ Header din√¢mico baseado no estado atual
‚Ä¢ Container √∫nico com moldura elegante
‚Ä¢ Quebra de linhas inteligente para texto longo

üé® RECURSOS IMPLEMENTADOS
‚Ä¢ ‚úÖ Container unificado com Lipgloss
‚Ä¢ ‚úÖ Header contextual autom√°tico
‚Ä¢ ‚úÖ Moldura responsiva e elegante
‚Ä¢ ‚úÖ Integra√ß√£o com Bubble Tea
‚Ä¢ ‚úÖ Quebra de texto inteligente
‚Ä¢ ‚úÖ Layout limpo e profissional

Esta √© uma demonstra√ß√£o visual do novo layout unificado.
O sistema mant√©m toda a l√≥gica original intacta.`
	}
}

// renderControls renderiza os controles da demonstra√ß√£o
func (sd *SimpleDemo) renderControls() string {
	controlStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("#666666")).
		Margin(1, 0, 0, 0)

	controls := `üéÆ CONTROLES DA DEMONSTRA√á√ÉO
‚Üí/L: Pr√≥ximo estado ‚Ä¢ ‚Üê/H: Estado anterior ‚Ä¢ R: Reset ‚Ä¢ Q/Ctrl+C/F4: Sair
Auto-avan√ßo: 3 segundos | Estado atual: ` + sd.getStateName()

	return controlStyle.Render(controls)
}

// getStateName retorna o nome amig√°vel do estado atual
func (sd *SimpleDemo) getStateName() string {
	switch sd.currentState {
	case models.StateClusterSelection:
		return "Sele√ß√£o de Clusters"
	case models.StateSessionSelection:
		return "Gerenciamento de Sess√µes"
	case models.StateNamespaceSelection:
		return "Sele√ß√£o de Namespaces"
	case models.StateHPASelection:
		return "Gerenciamento de HPAs"
	case models.StateHPAEditing:
		return "Editando HPA"
	case models.StateNodeSelection:
		return "Gerenciamento de Node Pools"
	case models.StateNodeEditing:
		return "Editando Node Pool"
	case models.StateCronJobSelection:
		return "Gerenciamento de CronJobs"
	default:
		return "Estado Desconhecido"
	}
}

// addStatusForCurrentState adiciona mensagens de status baseadas no estado atual
func (sd *SimpleDemo) addStatusForCurrentState() {
	switch sd.currentState {
	case models.StateClusterSelection:
		sd.container.AddStatusMessage(components.MessageInfo, "cluster", "Descobrindo clusters akspriv-*...")
	case models.StateSessionSelection:
		sd.container.AddStatusMessage(components.MessageSuccess, "session", "Sess√µes carregadas com sucesso")
	case models.StateNamespaceSelection:
		sd.container.AddStatusMessage(components.MessageInfo, "namespace", "Contando HPAs por namespace...")
	case models.StateHPASelection:
		sd.container.AddStatusMessage(components.MessageSuccess, "hpa", "24 HPAs encontrados em 3 namespaces")
	case models.StateHPAEditing:
		sd.container.AddStatusMessage(components.MessageWarning, "edit", "Modifica√ß√µes pendentes - lembre de salvar")
	case models.StateNodeSelection:
		sd.container.AddStatusMessage(components.MessageInfo, "azure", "Conectando com Azure AKS...")
	case models.StateNodeEditing:
		sd.container.AddStatusMessage(components.MessageSuccess, "azure", "Node pool configurado com sucesso")
	case models.StateCronJobSelection:
		sd.container.AddStatusMessage(components.MessageInfo, "cronjob", "Verificando status dos CronJobs...")
	}
}

// Tipo de mensagem para tick timer
type tickMsg time.Time